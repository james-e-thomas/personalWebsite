mutate(first_points = max(ifelse(is.na(total_points), 0, total_points))) %>%
ungroup() %>%
mutate(points_from_first = total_points - first_points) %>%
# manipulation for points on bench graph
group_by(manager_name) %>%
mutate(total_points_on_bench = if_else(is.na(points),
NA_integer_,
as.integer(cumsum(ifelse(is.na(points_on_bench), 0, points_on_bench))))) %>%
# manipulation for total points incl bench graph
mutate(total_points_incl_bench = total_points + total_points_on_bench) %>%
group_by(event) %>%
mutate(first_points_incl_bench = max(ifelse(is.na(total_points_incl_bench), 0, total_points_incl_bench))) %>%
ungroup() %>%
mutate(points_from_first_incl_bench = total_points_incl_bench - first_points_incl_bench) %>%
# manipulation for league rank graph
full_join(players_per_gw, by = c("event")) %>%
group_by(event) %>%
mutate(rank = if_else(is.na(points),
NA_integer_,
rank(total_points, ties.method = "max")),
rank = players_per_gw + 1 - rank) %>%
ungroup() %>%
# manipulation for overall transfers graph
group_by(manager_name) %>%
mutate(total_transfers = if_else(is.na(points),
NA_integer_,
as.integer(cumsum(ifelse(is.na(event_transfers), 0, event_transfers)))),
total_transfers_cost = if_else(is.na(points),
NA_integer_,
as.integer(cumsum(ifelse(is.na(event_transfers_cost), 0, event_transfers_cost))))) %>%
ungroup() %>%
# manipulation for green/red arrows
group_by(manager_name) %>%
mutate(overall_rank_lag = if_else(is.na(points),
NA_integer_,
as.integer(lag(overall_rank))),
arrow = if_else(is.na(points),
NA_character_,
if_else(is.na(overall_rank_lag),
"\U25B6\UFE0E",
if_else(overall_rank < overall_rank_lag,
"\U25B2\UFE0E",
"\U25BC\UFE0E"))),
arrow2 = if_else(is.na(points),
NA_integer_,
if_else(is.na(overall_rank_lag),
as.integer(0),
if_else(overall_rank < overall_rank_lag,
as.integer(1),
as.integer(-1))))) %>%
ungroup()
managers <- sort(unique(league_data$manager_name))
var_names <- gsub(" ", "_", managers)
for (i in 1:length(unique(league_data$manager_name))) {
var_name <- sym(var_names[i])
league_data2 <- select(filter(league_data, manager_name == managers[i]), points)
league_data3 <- league_data2
for (n in 1:(length(unique(league_data$manager_name))-1)) {
league_data3 <- bind_rows(league_data3, league_data2)
rm(n)
}
league_data3 <- rename(league_data3, !!var_name := points)
league_data <- cbind.data.frame(league_data, league_data3)
league_data <- mutate(league_data, !!var_name := points - !!var_name)
}
rm(league_data2, league_data3, i, managers, var_name, var_names)
return(league_data)
### ---------------------------------------------------------------------- ###
### 09_format_league_table_update                                          ###
### ---------------------------------------------------------------------- ###
league_table <- league_data
league_table <- league_table %>%
rename(arrow_gw1 = arrow) %>%
mutate(arrow_gw2 = lag(arrow_gw1)) %>%
mutate(arrow_gw3 = lag(arrow_gw2)) %>%
mutate(arrow_gw4 = lag(arrow_gw3)) %>%
mutate(arrow_gw5 = lag(arrow_gw4)) %>%
mutate(event_pts1 = points) %>%
mutate(event_pts2 = lag(event_pts1)) %>%
mutate(event_pts3 = lag(event_pts2)) %>%
mutate(event_pts4 = lag(event_pts3)) %>%
mutate(event_pts5 = lag(event_pts4)) %>%
mutate(event_pts1_3 = event_pts1 +
event_pts2 +
event_pts3) %>%
mutate(event_pts1_5 = event_pts1 +
event_pts2 +
event_pts3 +
event_pts4 +
event_pts5) %>%
mutate(rank2 = lag(rank)) %>%
mutate(up_down = if_else(is.na(rank2), "\U25B6\UFE0E",
if_else(rank == rank2, "\U25B6\UFE0E",
if_else(rank < rank2, "\U25B2\UFE0E", "\U25BC\UFE0E")))) %>%
mutate(up_down_col = if_else(is.na(rank2), "#2e3842",
if_else(rank == rank2, "#2e3842",
if_else(rank < rank2, "#1A9850", "#D73027")))) %>%
filter(is.na(points) == FALSE) %>%
filter(event == max(event)) %>%
select(up_down,
manager_name,
event_pts1,
event_pts1_3,
event_pts1_5,
overall_rank,
total_points,
points_from_first,
arrow_gw1,
arrow_gw2,
arrow_gw3,
arrow_gw4,
arrow_gw5,
total_points_on_bench,
total_transfers_cost,
value,
up_down_col) %>%
rename(NAME = manager_name,
L1 = event_pts1,
L3 = event_pts1_3,
L5 = event_pts1_5,
RNK = overall_rank,
PTS = total_points,
LAG = points_from_first,
F1 = arrow_gw1,
F2 = arrow_gw2,
F3 = arrow_gw3,
F4 = arrow_gw4,
F5 = arrow_gw5,
B = total_points_on_bench,
TC = total_transfers_cost,
TV = value) %>%
arrange(-PTS)
# not sure why but doesn't work with pipe
league_table <- mutate(league_table, up_down = paste0(up_down, " ", rownames(league_table)))
return(league_table)
#----------------------------------
player_gw_data <- pivot_wider(select(live_league_datas, manager_name, played_in_gw_tot, points_tot, position, label2), names_from = position, values_from = label2)
player_gw_data <- data.frame(t(player_gw_data)) # for transposed version
colnames(player_gw_data) <- as.vector(player_gw_data[1,]) # for transposed version
player_gw_data <- filter(player_gw_data, rownames(player_gw_data) != "manager_name") # for transposed version
var_names <- colnames(player_gw_data)
for (i in 1:length(var_names)) {
var_name <- as.symbol(paste0("colour_", i))
player_gw_data <- mutate(player_gw_data, !!var_name := grepl("\U2611", player_gw_data[, i]) == TRUE)
player_gw_data <- mutate(player_gw_data, !!var_name := if_else(rownames(player_gw_data) %in% c(14:17),
"#505393",
if_else(rownames(player_gw_data) %in% c(1:2),
"#2e3842",
if_else(!!var_name == TRUE,
"#2e3842",
"#21b2a6")))) # #FF8427
}
rownames(player_gw_data) <- c("P", "PTS", "P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8", "P9", "P10", "P11", "B1", "B2", "B3", "B4")
return(player_gw_data)
vars <- colnames(player_gw_data())[((ncol(player_gw_data())/2) + 1):(ncol(player_gw_data()))]
head_to_head_data <- filter(league_data, manager_name == "James Thomas")
head_to_head_data <- mutate(head_to_head_data, rank2 = lag(rank)) %>%
mutate(arrow_col = if_else(is.na(rank2), "#2e3842",
if_else(rank == rank2, "#2e3842",
if_else(rank < rank2, "#1A9850", "#D73027"))))
# font style for graphs
text_font <- list(
family = "Roboto",
size = 14,
color = "#2e3842"
)
# font for graph labels
label_font <- list(
family = "Roboto"
)
# watermark for graphs
watermark <- list(
list(
source = "https://raw.githubusercontent.com/james-e-thomas/james-e-thomas.github.io/master/images/watermark.png",
xref = "x",
yref = "paper",
x = 0,
y = 0.5,
yanchor = "middle",
sizex = 38,
sizey = 38,
opacity = 0.05,
layer = "below"
)
)
# x-axis layout for mobile devices in portrait position
x_mobile_portrait <- list(
title = "",
zeroline = FALSE,
showline = FALSE
)
# x-axis layout for mobile devices in landscape position
x_mobile_landscape <- list(
title = "Gameweek",
zeroline = FALSE,
showline = FALSE
)
# x-axis layout for larger devices
x_larger <- list(
title = "Gameweek",
range = c(0, 38),
zeroline = FALSE,
showline = FALSE
)
# y-axis layout when y = 0 has a line over it
y_line <- list(zeroline = TRUE,
showline = FALSE,
linecolor = "#2e3842")
# y-axis layout when y = 0 doesn't have a line over it
y_noline <- list(zeroline = FALSE,
showline = FALSE)
# legend layout for mobile devices in portrait position
legend_mobile_portrait <- list(
orientation = "h",
xanchor = "center",
x = 0.5
)
# colours for line graphs
colourscale <- c("#2e3842",
"#E0FF4F",
"#76ddff",
"#A288E3",
"#FF8427",
"#21b2a6")
# Colours for bars coloured by red/green arrow
RdBlGr <- c("#1A9850", "#2e3842", "#D73027")
head_to_head <- plot_ly(head_to_head_data,
x = ~event,
y = ~Jash_Bhank,
type = "bar",
color = ~arrow,
colors = ~arrow_col,
hoverlabel = label_font) %>%
layout(font = text_font,
xaxis = x_larger,
yaxis = c(list(title = "Gameweek Points"), y_noline),
legend = legend_mobile_portrait,
images = watermark)
head_to_head
View(head_to_head_data)
library("plotly")
df=data.frame(Month=c("Jan", "Feb","Mar", "Apr", "May", "Jun"),
Criteria1 = c(10, 15,20,15,7,6),
Criteria2 = c(3, 8, 5, 7, 9, 10),
Criteria3 = c(11, 18, 14, 9, 3, 1))
View(df)
colNames <- names(df)[-1] #Month is the first column
colors <- c('#CC1480', '#FF9673', '#E1C8B4')
p <- plotly::plot_ly()
#colNames = c('Criteria1')
for(trace in colNames){
p <- plotly::add_trace(p,
x = df$Month,
y = df[,trace],
marker = list(color = colors[[match(trace, colNames)]]),
name = trace,
type = "bar")
}
p
load("C:/Users/james/Documents/Market Investigations/market investigations.RData")
load("~/Market Investigations/market investigations.RData")
arrow_col <- as.vector(head_to_head_data$arrow_col)
blogdown::serve_site()
blogdown::stop_server()
cd "C:\Users\james\Documents\personalWebsite"
cd "C:\\Users\\james\\Documents\\personalWebsite"
library(shiny)
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
tags$head(tags$script('
var dimension = [0, 0];
$(document).on("shiny:connected", function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
$(window).resize(function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
')),
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
verbatimTextOutput("dimension_display"),
plotOutput("distPlot")
)
)
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output) {
output$dimension_display <- renderText({
paste(input$dimension[1], input$dimension[2], input$dimension[2]/input$dimension[1])
})
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
# Run the application
shinyApp(ui = ui, server = server)
setwd("C:\\Users\\james\\Documents\\personalWebsite")
blogdown::serve_site()
blogdown::serve_site()
getwd
getwd()
---
site: blogdown:::blogdown_site
---
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
---
title: Hosting a Shiny App on Google Cloud
author: ''
date: '2021-08-11'
slug: hosting-a-shiny-app-on-google-cloud
categories: []
tags: []
---
There are various [options for deploying a Shiny App](https://medium.com/@akpradhn/how-to-deploy-a-shiny-app-at-zero-cost-94e8897df34d).
The most straightforward way of hosting your Shiny App is on [shinyapps.io](https://www.shinyapps.io/). All you need to do is set up an account and run a few lines of code from the R console.
The downside is that it can be a bit pricey if it's not just for personal use / free tier doesn't quite cut it for your level of usage.
In my case there is also the fact that I want to embed my Shiny App within a static website (which wouldn't be hosted on shinyapps.io) using an iframe. This is a bit of a hack, but it's difficult for me to build the full website using `shiny` for various reasons. Embedding my app in this way and hosting on shinyapps.io can then have some undesirable consequences unless I am willing (which I am not) to shell out for the professional plan which comes with custom domains. These consequences could for example be that Google thinks you are trying to monetise a third party's application and so doesn't let you place ads on the static part of the website.
This post documents how to host a Shiny App on the Google Cloud. This won't be the most comprehensive guide in the world (as the main purpose of this post is to bail out future me should he need some help when repeating the process with a new Shiny App), but I will try to provide links to plug any obvious gaps.
Right. So I am by no means an expert on these things, but I gather its [good practice](https://www.r-bloggers.com/2021/05/dockerizing-shiny-applications/) to 'dockerize' a Shiny App first and then pull the docker image into something like Google's Cloud Run. So let's do that.
PS: I thought [this](https://www.charlesbordet.com/en/guide-shiny-aws/#1-create-a-shiny-app) guide by Charles Bordet was good for directly hosting an app on AWS using [Shiny Server](https://shiny.rstudio.com/articles/shiny-server.html) (i.e. without dockerizing the app first).
# Dockerizing a Shiny App
I used the following [guide](https://blog.sellorm.com/2021/04/25/shiny-app-in-docker/) by Mark Sellors to build and run a docker image. It works through everything needed and is fairly self-explanatory. Docker needs to be [installed](https://www.docker.com/get-started) of course.
It works through everything using [his own demo project](https://github.com/sellorm/shiny-app-docker), which is based off the [rocker project's base shiny image](https://hub.docker.com/r/rocker/shiny) (files [here](https://github.com/rocker-org/shiny)). When following the instructions, make sure that you clone *his* demo project (rather than the one his is based off) and then `build` the image. Cloning the original files and then building the image threw up an error for me.
So download his project files and replace his app with yours. I illustrate a few extensions that require a few additions / tweaks to the dockerfile.
#### Installing packages from Github
In order to use packages from GitHub, an additional line is needed (after the code for installing CRAN packages). Here it is (of course devtools needs to be one of the CRAN packages you just installed...):
```{r eval=FALSE}
RUN R -e "devtools::install_github('trestletech/shinyStore')"
```
#### Custom styling using CSS
Another extension that I needed was custom CSS styling (the following also applies if you have images to add or anything you need to use a `www` folder for). Assuming you have a `www` folder with a CSS file in it, you need to remove the asterisk from the following line in the dockerfile:
```{r eval=FALSE}
COPY ./shiny-app/* /srv/shiny-server/
```
Which gives instead:
```{r eval=FALSE}
COPY ./shiny-app/ /srv/shiny-server/
```
Doing this ensures that everything inside the `shiny-app` folder is copied to the Docker image.
My final dockerfile looks like this (of course, you should install the packages that you want; and you may want to specify a different version of R or pin the packages to a different date):
```{r eval=FALSE}
# Example shiny app docker file
# https://blog.sellorm.com/2021/04/25/shiny-app-in-docker/
# get shiny serveR and a version of R from the rocker project
FROM rocker/shiny:4.1.1
# system libraries
# Try to only install system libraries you actually need
# Package Manager is a good resource to help discover system deps
RUN apt-get update && apt-get install -y \
libcurl4-gnutls-dev \
libssl-dev
# install R packages required
# Change the packages list to suit your needs
RUN R -e 'install.packages(c(\
"shiny", \
"dplyr", \
"plotly", \
"DT", \
"shinycssloaders", \
"tidyr", \
"RJSONIO", \
"sysfonts", \
"shinyjs", \
"miniUI", \
"devtools" \
), \
repos="https://packagemanager.rstudio.com/cran/__linux__/focal/2021-08-10"\
)'
# Install github packages required
RUN R -e "devtools::install_github('trestletech/shinyStore')"
# copy the app directory into the image
COPY ./shiny-app/ /srv/shiny-server/
# run app
CMD ["/usr/bin/shiny-server"]
```
# Hosting dockerized Shiny App on Google Cloud
#### Pushing the image to the Docker Hub
The next step in hosting your app on Google Cloud is pushing your image to a repository. This can be pushed to the Google container registry, but I push mine to the Docker Hub (for no particular reason).
This process is fairly simple and is well [explained by Docker in this Youtube video](https://www.youtube.com/watch?v=iqqDU2crIEQ&t=1002s).
But in essence, once you have a docker account (with username `username` say) and an image (called `image_name` say), you need to create a repository (also called `image_name`) and tag your image by running the following command:
```{r eval=FALSE}
docker tag image_name username/image_name
```
If you run the following, you will see that there are now two images, and one of these now matches your repository on the Docker Hub:
```{r eval=FALSE}
docker images
```
You then simply push the image to the Docker Hub:
```{r eval=FALSE}
docker push username/image_name
```
#### Creating your virtual machine
Once your docker image is on the Docker Hub, you then need to create a virtual instance on Google Cloud. Simply set up an account, then go to the [VM instances](https://console.cloud.google.com/compute/instances) page and click on 'Create Instance'.
Select the VM you want (e.g. on of the 'Free tier' ones). Under 'Container', select 'Deploy contained image' and link to you container image.
Once your instance has been created, click on the 'More actions' dots and select 'View network details'. Then on the sidebar click on 'Firewall' and click on 'Create firewall rule'. Give the rule a name (e.g. 'rshiny'). Under 'Targets', select 'Specified service account'. Under 'Source IP ranges', type '0.0.0.0/0'. Under 'Protocols and ports', tick 'tcp' and type '3838'.
---
title: Hosting a Shiny App on Google Cloud
author: ''
date: '2021-08-11'
slug: hosting-a-shiny-app-on-google-cloud
categories: []
tags: []
---
There are various [options for deploying a Shiny App](https://medium.com/@akpradhn/how-to-deploy-a-shiny-app-at-zero-cost-94e8897df34d).
The most straightforward way of hosting your Shiny App is on [shinyapps.io](https://www.shinyapps.io/). All you need to do is set up an account and run a few lines of code from the R console.
The downside is that it can be a bit pricey if it's not just for personal use / free tier doesn't quite cut it for your level of usage.
In my case there is also the fact that I want to embed my Shiny App within a static website (which wouldn't be hosted on shinyapps.io) using an iframe. This is a bit of a hack, but it's difficult for me to build the full website using `shiny` for various reasons. Embedding my app in this way and hosting on shinyapps.io can then have some undesirable consequences unless I am willing (which I am not) to shell out for the professional plan which comes with custom domains. These consequences could for example be that Google thinks you are trying to monetise a third party's application and so doesn't let you place ads on the static part of the website.
This post documents how to host a Shiny App on the Google Cloud. This won't be the most comprehensive guide in the world (as the main purpose of this post is to bail out future me should he need some help when repeating the process with a new Shiny App), but I will try to provide links to plug any obvious gaps.
Right. So I am by no means an expert on these things, but I gather its [good practice](https://www.r-bloggers.com/2021/05/dockerizing-shiny-applications/) to 'dockerize' a Shiny App first and then pull the docker image into something like Google's Cloud Run. So let's do that.
PS: I thought [this](https://www.charlesbordet.com/en/guide-shiny-aws/#1-create-a-shiny-app) guide by Charles Bordet was good for directly hosting an app on AWS using [Shiny Server](https://shiny.rstudio.com/articles/shiny-server.html) (i.e. without dockerizing the app first).
# Dockerizing a Shiny App
I used the following [guide](https://blog.sellorm.com/2021/04/25/shiny-app-in-docker/) by Mark Sellors to build and run a docker image. It works through everything needed and is fairly self-explanatory. Docker needs to be [installed](https://www.docker.com/get-started) of course.
It works through everything using [his own demo project](https://github.com/sellorm/shiny-app-docker), which is based off the [rocker project's base shiny image](https://hub.docker.com/r/rocker/shiny) (files [here](https://github.com/rocker-org/shiny)). When following the instructions, make sure that you clone *his* demo project (rather than the one his is based off) and then `build` the image. Cloning the original files and then building the image threw up an error for me.
So download his project files and replace his app with yours. I illustrate a few extensions that require a few additions / tweaks to the dockerfile.
#### Installing packages from Github
In order to use packages from GitHub, an additional line is needed (after the code for installing CRAN packages). Here it is (of course devtools needs to be one of the CRAN packages you just installed...):
```{r eval=FALSE}
RUN R -e "devtools::install_github('trestletech/shinyStore')"
```
#### Custom styling using CSS
Another extension that I needed was custom CSS styling (the following also applies if you have images to add or anything you need to use a `www` folder for). Assuming you have a `www` folder with a CSS file in it, you need to remove the asterisk from the following line in the dockerfile:
```{r eval=FALSE}
COPY ./shiny-app/* /srv/shiny-server/
```
Which gives instead:
```{r eval=FALSE}
COPY ./shiny-app/ /srv/shiny-server/
```
Doing this ensures that everything inside the `shiny-app` folder is copied to the Docker image.
My final dockerfile looks like this (of course, you should install the packages that you want; and you may want to specify a different version of R or pin the packages to a different date):
```{r eval=FALSE}
# Example shiny app docker file
# https://blog.sellorm.com/2021/04/25/shiny-app-in-docker/
# get shiny serveR and a version of R from the rocker project
FROM rocker/shiny:4.1.1
# system libraries
# Try to only install system libraries you actually need
# Package Manager is a good resource to help discover system deps
RUN apt-get update && apt-get install -y \
libcurl4-gnutls-dev \
libssl-dev
# install R packages required
# Change the packages list to suit your needs
RUN R -e 'install.packages(c(\
"shiny", \
"dplyr", \
"plotly", \
"DT", \
"shinycssloaders", \
"tidyr", \
"RJSONIO", \
"sysfonts", \
"shinyjs", \
"miniUI", \
"devtools" \
), \
repos="https://packagemanager.rstudio.com/cran/__linux__/focal/2021-08-10"\
)'
# Install github packages required
RUN R -e "devtools::install_github('trestletech/shinyStore')"
# copy the app directory into the image
COPY ./shiny-app/ /srv/shiny-server/
# run app
CMD ["/usr/bin/shiny-server"]
```
# Hosting dockerized Shiny App on Google Cloud
#### Pushing the image to the Docker Hub
The next step in hosting your app on Google Cloud is pushing your image to a repository. This can be pushed to the Google container registry, but I push mine to the Docker Hub (for no particular reason).
This process is fairly simple and is well [explained by Docker in this Youtube video](https://www.youtube.com/watch?v=iqqDU2crIEQ&t=1002s).
But in essence, once you have a docker account (with username `username` say) and an image (called `image_name` say), you need to create a repository (also called `image_name`) and tag your image by running the following command:
```{r eval=FALSE}
docker tag image_name username/image_name
```
If you run the following, you will see that there are now two images, and one of these now matches your repository on the Docker Hub:
```{r eval=FALSE}
docker images
```
You then simply push the image to the Docker Hub:
```{r eval=FALSE}
docker push username/image_name
```
#### Creating your virtual machine
Once your docker image is on the Docker Hub, you then need to create a virtual instance on Google Cloud. Simply set up an account, then go to the [VM instances](https://console.cloud.google.com/compute/instances) page and click on 'Create Instance'.
Select the VM you want (e.g. one of the 'Free tier' ones). Under 'Container', select 'Deploy contained image' and link to your container image.
Once your instance has been created, click on the 'More actions' dots and select 'View network details'. Then on the sidebar click on 'Firewall' and click on 'Create firewall rule'. Give the rule a name (e.g. 'rshiny'). Under 'Targets', select 'Specified service account'. Under 'Source IP ranges', type '0.0.0.0/0'. Under 'Protocols and ports', tick 'tcp' and type '3838'.
---
site: blogdown:::blogdown_site
---
blogdown:::preview_site()
blogdown::build_site()
